from flask import Flask, request, render_template_string
import threading
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
import logging

BOT_TOKEN = "8160261655:AAFlIGI8lirPE4U5uLeBe_bah1tIktvzdSA"
OWNER_ID = 617739749
known_messages = {}  # message_id -> user_id

# === Flask-–∑–∞–≥–ª—É—à–∫–∞ + –ø—Ä–æ—Å—Ç–µ–π—à–∞—è –ø–∞–Ω–µ–ª—å ===
app = Flask(__name__)

@app.route("/")
def index():
    return "<h1>ZakBot —Ä–∞–±–æ—Ç–∞–µ—Ç ‚úÖ</h1><p>–ü–∞–Ω–µ–ª—å –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...</p>"

def run_flask():
    app.run(host="0.0.0.0", port=10000)

# === –°—Ç–∞—Ä—Ç-–∫–æ–º–∞–Ω–¥–∞ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úÖ ZakBot –≤–∫–ª—é—á—ë–Ω. –ü–∏—à–∏—Ç–µ —Å—é–¥–∞.")

# === –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º ===
AUTO_REPLIES = {
    "–ø—Ä–∏–≤–µ—Ç": "üëã –ü—Ä–∏–≤–µ—Ç-–ø—Ä–∏–≤–µ—Ç!",
    "—Ç—ã –∫—Ç–æ": "ü§ñ –Ø –±–æ—Ç Zakviel, —è –ø–µ—Ä–µ—Å—ã–ª–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è —Ö–æ–∑—è–∏–Ω—É.",
}

async def handle_msg(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    text = update.message.text or ""

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–≤–µ—Ç–∏—Ç—å"
    known_messages[str(update.message.message_id)] = user.id

    # –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    for trigger, reply in AUTO_REPLIES.items():
        if trigger in text.lower():
            await context.bot.send_message(chat_id=user.id, text=reply)
            break

    # –í–ª–∞–¥–µ–ª–µ—Ü –ø–∏—à–µ—Ç —Å–∞–º —Å–µ–±–µ
    if user.id == OWNER_ID:
        await update.message.reply_text("üü¢ –ü—Ä–∏–Ω—è–ª.")
        return

    # –ü–µ—Ä–µ—Å–ª–∞—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü—É —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–≤–µ—Ç–∏—Ç—å"
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply:{user.id}:{update.message.message_id}")]
    ])

    await context.bot.send_message(
        chat_id=OWNER_ID,
        text=f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{user.username or user.first_name} [{user.id}]:\n{text}",
        reply_markup=keyboard
    )

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–≤–µ—Ç–∏—Ç—å" ===
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data
    if not data.startswith("reply:"):
        return

    parts = data.split(":")
    target_id = int(parts[1])

    await query.message.reply_text(f"‚úçÔ∏è –ù–∞–ø–∏—à–∏, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}.\n–§–æ—Ä–º–∞—Ç:\n/re {target_id} —Ç–µ–∫—Å—Ç")

# === –ö–æ–º–∞–Ω–¥–∞ /re user_id —Å–æ–æ–±—â–µ–Ω–∏–µ ===
async def re_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != OWNER_ID:
        return

    if len(context.args) < 2:
        await update.message.reply_text("‚ùó –ü—Ä–∏–º–µ—Ä: /re 123456789 –ü—Ä–∏–≤–µ—Ç!")
        return

    user_id = int(context.args[0])
    message_text = ' '.join(context.args[1:])

    try:
        await context.bot.send_message(chat_id=user_id, text=message_text)
        await update.message.reply_text("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
def run_bot():
    app_bot = ApplicationBuilder().token(BOT_TOKEN).build()
    app_bot.add_handler(CommandHandler("start", start))
    app_bot.add_handler(CommandHandler("re", re_cmd))
    app_bot.add_handler(CallbackQueryHandler(button_handler))
    app_bot.add_handler(MessageHandler(filters.TEXT, handle_msg))
    app_bot.run_polling()

# === –ó–∞–ø—É—Å–∫ Flask + Telegram ===
if __name__ == '__main__':
    threading.Thread(target=run_flask).start()
    run_bot()
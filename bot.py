from flask import Flask
import threading
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
import logging
from datetime import datetime

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
BOT_TOKEN = "8160261655:AAFlIGI8lirPE4U5uLeBe_bah1tIktvzdSA"
OWNER_ID = 617739749

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª ===
logging.basicConfig(
    filename="log.txt",
    level=logging.INFO,
    format="%(asctime)s - %(message)s",
)

# === Flask-–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è Render ===
app = Flask(__name__)

@app.route('/')
def index():
    return "Bot is alive!"

def run_flask():
    app.run(host='0.0.0.0', port=10000)

# === –ö–æ–º–∞–Ω–¥–∞ /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Render!")

# === –ö–æ–º–∞–Ω–¥–∞ /–æ—Ç–≤–µ—Ç <id> <—Å–æ–æ–±—â–µ–Ω–∏–µ> (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞) ===
async def reply_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != OWNER_ID:
        return

    if len(context.args) < 2:
        await update.message.reply_text("‚ùó –ü—Ä–∏–º–µ—Ä: /–æ—Ç–≤–µ—Ç 123456789 –ü—Ä–∏–≤–µ—Ç!")
        return

    user_id = int(context.args[0])
    message_text = ' '.join(context.args[1:])
    try:
        await context.bot.send_message(chat_id=user_id, text=message_text)
        await update.message.reply_text(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ===
async def handle_msg(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    text = update.message.text or ""

    # –õ–æ–≥ –≤ —Ñ–∞–π–ª
    logging.info(f"From {user.id} ({user.username}): {text}")

    # –ï—Å–ª–∏ –ø–∏—à–µ—Ç –≤–ª–∞–¥–µ–ª–µ—Ü
    if user.id == OWNER_ID:
        await update.message.reply_text("üü¢ –ü—Ä–∏–Ω—è–ª.")
        return

    # –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç
    if "–ø—Ä–∏–≤–µ—Ç" in text.lower():
        await context.bot.send_message(chat_id=user.id, text="üëã –ü—Ä–∏–≤–µ—Ç!")

    # –ü–µ—Ä–µ—Å–ª–∞—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü—É
    await context.bot.send_message(
        chat_id=OWNER_ID,
        text=f"üì® –û—Ç @{user.username or user.first_name} [{user.id}]:\n{text}"
    )

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
def run_bot():
    app_bot = ApplicationBuilder().token(BOT_TOKEN).build()
    app_bot.add_handler(CommandHandler("start", start))
    app_bot.add_handler(CommandHandler("–æ—Ç–≤–µ—Ç", reply_cmd))
    app_bot.add_handler(MessageHandler(filters.TEXT, handle_msg))
    app_bot.run_polling()

# === –ó–∞–ø—É—Å–∫ Flask –∏ –±–æ—Ç–∞ ===
if __name__ == '__main__':
    threading.Thread(target=run_flask).start()
    run_bot()
